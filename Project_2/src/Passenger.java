

/* AccidentSubscriber.java

A publication of data of type Accident

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type Accident automatically generated by 
'rtiddsgen' To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service with the command
java AccidentSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
java AccidentPublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.                       

On UNIX systems: 
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows systems:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/class AccidentPublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/class AccidentSubscriber <domain_id>  
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.subscription.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

// ===========================================================================

public class Passenger extends Thread {
	String route; //route the passenger wants to get on
	int start; //stop they are waiting at first
	int end; //stop they get off at
	DomainParticipant participant;
	
	public Passenger(String route, int start, int end) {
		this.route = route;
		this.start = start;
		this.end = end;
		
		DomainParticipant participant = null;
		
        // --- Create participant --- //

        participant = DomainParticipantFactory.TheParticipantFactory.
        create_participant(
            0, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
            null /* listener */, StatusKind.STATUS_MASK_NONE);
        if (participant == null) {
            System.err.println("create_participant error\n");
            return;
        }      
		
        /* Register type before creating topic */
		String positionTypeName = PositionTypeSupport.get_type_name();
		PositionTypeSupport.register_type(participant, positionTypeName);

        String accidentTypeName = AccidentTypeSupport.get_type_name();
        AccidentTypeSupport.register_type(participant, accidentTypeName);
	}

	//function that a thread uses to execute. From this point on the class runs as a thread
	// Is called through PubThread.start()
	public void run() {
        Subscriber subscriber = null;        
		Topic positionTopic = null;
		Topic accidentTopic = null;
        DataReaderListener accidentListener = null;
        DataReaderListener positionListener = null;
        AccidentDataReader accidentReader = null;
        PositionDataReader positionReader = null;

        try {

                   

            // --- Create subscriber --- //

            /* To customize subscriber QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            subscriber = participant.create_subscriber(
                DomainParticipant.SUBSCRIBER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (subscriber == null) {
                System.err.println("create_subscriber error\n");
                return;
            }     

            // --- Create topic --- //



			positionTopic = participant.create_topic("P2464_ischultz:POS", positionTypeName, DomainParticipant.TOPIC_QOS_DEFAULT, null /* listener */, StatusKind.STATUS_MASK_NONE);
			if (positionTopic == null) {
				System.err.println("create_topic error\n");
				return;
			}
			
			accidentTopic = participant.create_topic("P2464_ischultz:ACC", accidentTypeName, DomainParticipant.TOPIC_QOS_DEFAULT, null /* listener */, StatusKind.STATUS_MASK_NONE);
			if (accidentTopic == null) {
				System.err.println("create_topic error\n");
				return;
			}

            // --- Create reader --- //

            accidentListener = new AccidentListener();
            positionListener = new PositionListener();

            /* To customize data reader QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            accidentReader = (AccidentDataReader)
            subscriber.create_datareader(
                accidentTopic, Subscriber.DATAREADER_QOS_DEFAULT, accidentListener,
                StatusKind.STATUS_MASK_ALL);
            if (accidentReader == null) {
                System.err.println("create_datareader error\n");
                return;
            }
            
            positionReader = (PositionDataReader)
                    subscriber.create_datareader(
                    		positionTopic, Subscriber.DATAREADER_QOS_DEFAULT, positionListener,
                        StatusKind.STATUS_MASK_ALL);
                    if (positionReader == null) {
                        System.err.println("create_datareader error\n");
                        return;
                    }  

            // --- Wait for data --- //
                    
            System.out.println("MessageType\tRoute\t\tVehicle\t\tTraffic\t\tStop#\t#Stops\tTimeBetweenStops\tFill%\tTimestamp");

            while (true) {
                try {
                    Thread.sleep(1000);  // in millisec
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }
        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
            /* RTI Data Distribution Service provides the finalize_instance()
            method for users who want to release memory used by the
            participant factory singleton. Uncomment the following block of
            code for clean destruction of the participant factory
            singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }
	
	public Topic makeListenToBusPosTopic(String bus, String typeName)
	{
		Topic newTopic = participant.create_topic("P2464_ischultz:POS", typeName, "name MATCH %0", bus, StatusKind.STATUS_MASK_NONE);
		if (newTopic == null) {
			System.err.println("create_topic error\n");
			throw new Exception("create topic error");
		}
		return newTopic
	}

    // -----------------------------------------------------------------------
    // Private Types
    // -----------------------------------------------------------------------

    // =======================================================================

    private static class AccidentListener extends DataReaderAdapter {

        AccidentSeq _dataSeq = new AccidentSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        public void on_data_available(DataReader reader) {
            AccidentDataReader AccidentReader =
            (AccidentDataReader)reader;

            try {
                AccidentReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);
                    Accident acc = ((Accident)_dataSeq.get(i)); // make an accident object
                    
                    if (info.valid_data) {
                        System.out.println("Accident!\t" + acc.route + "\t" + acc.vehicle + "\t\t\t\t" + acc.stopNumber + "\t\t\t\t\t\t" + acc.timestamp);
                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                AccidentReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
    
    private static class PositionListener extends DataReaderAdapter {

        PositionSeq _dataSeq = new PositionSeq();
        SampleInfoSeq _infoSeq = new SampleInfoSeq();

        public void on_data_available(DataReader reader) {
            PositionDataReader PositionReader =
            (PositionDataReader)reader;

            try {
                PositionReader.take(
                    _dataSeq, _infoSeq,
                    ResourceLimitsQosPolicy.LENGTH_UNLIMITED,
                    SampleStateKind.ANY_SAMPLE_STATE,
                    ViewStateKind.ANY_VIEW_STATE,
                    InstanceStateKind.ANY_INSTANCE_STATE);

                for(int i = 0; i < _dataSeq.size(); ++i) {
                    SampleInfo info = (SampleInfo)_infoSeq.get(i);
                    Position pos = (Position)_dataSeq.get(i);

                    if (info.valid_data) {                    	
                    	System.out.println("Position\t" + pos.route + "\t" + pos.vehicle + "\t\t" + pos.trafficConditions + "\t\t" + pos.stopNumber + "\t" + pos.numStops + "\t" + pos.timeBetweenStops + "\t\t\t" + pos.fillInRatio + "\t" + pos.timestamp);
                    	
                    	if ()
                    	{
                    		
                    	}
                    }
                }
            } catch (RETCODE_NO_DATA noData) {
                // No data to process
            } finally {
                PositionReader.return_loan(_dataSeq, _infoSeq);
            }
        }
    }
}

